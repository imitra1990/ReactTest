React Code
1. Calling fetch directly from the component is not recommended. 
It is better to use the redux saga or redux thunk from there you can call the API. 
Avoid `.then`, use 'async...await'


2. Add  ‘userId’ dependency in ‘useEffect’,  otherwise data will not be updated when ‘userId’ change.
 It will execute only once at the beginning only.

    useEffect(()=>
    {

    }
    ,[userId])


3. Handle the loading 
    i) Handle the api call loader by creating a loader state object like bellow.

    const [isLoading,setIsLoading] = useState(false);

    useEffect(()=>{
        setIsLoading(true);

        fetch(`http://..`)
        .then((response)=>{
            setIsLoading(false);
            setUser(response.json())
        })
        .catch(error=>
        {
            setIsLoading(false)
            ...
        })
    },[])

    {
        isLoading ? <p>Is Loading</p> 
        : <div>...
    }

    ii) Also set the user object with in a single then. Don't need to write multiple then.


3. Error handler 
   i) Handel the error by creating a new error state.
   const [hasError, setHasError] = useState(false);

    useEffect(()=>{
        setHasError(false);

        fetch(`http://..`)
        .then((response)=>{...
        })
        .catch(error=>
        {
            ...
            setHasError(true);
        })
    },[])

    {
        hasError ? <p>Unable to fetch the User details. Please try after sometime.</p> 
    }
   ii) Show better error message for the end user. Like "Unable to fetch the User details. Please try after sometime.".

4. Declare the User Type

    type user = {
        username:string,
        bio:string
    }

5. Handle the following non happy paths

    i) If the ‘userId’ is not valid
    ii) If the ‘userId’ is undefined
    iii) If the api return the ‘userId’ not found